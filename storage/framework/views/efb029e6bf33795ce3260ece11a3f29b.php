

<?php $__env->startSection('title', 'Search Higher - Laravel Demo Application'); ?>

<?php $__env->startSection('content'); ?>
    <!-- Advanced Search Form Section -->
    <div class="content-wrapper">
        <div class="container py-5 position-relative" style="min-height: 100vh;">
            <div class="bg-white rounded-4 shadow-lg p-4 position-relative z-3 ">
                <!-- Main Title -->
                <div class="fw-bold text-dark fs-3 fs-md-2 fs-lg-1 mb-4 text-center">
                    Bạn muốn thuê xe ở đâu
                </div>

                <!-- Search Form -->
                <div class="d-flex flex-column flex-lg-row gap-3 align-items-stretch">
                    <!-- Left Section: Input Fields -->
                    <div class="d-flex flex-column flex-lg-row flex-grow-1 gap-3">
                        <!-- Location Input -->
                        <div class="flex-grow-1">
                            <div style="height:52px"
                                class="input-group border rounded position-relative d-flex align-items-center">
                                <input type="text" class="form-control border-0" id="locationInput"
                                    placeholder="Địa điểm" readonly>
                                <!-- Select from Map Button -->
                                <button class="btn-select-map btn bg-white px-3 py-2 rounded-3"
                                    onclick="toggleLocationDropdown()">
                                    Chọn từ bản đồ
                                </button>
                            </div>
                        </div>

                        <!-- Date Input -->
                        <div class="flex-grow-1">
                            <div style="height:52px" class="input-group border rounded position-relative">

                                <div class="d-flex align-items-center px-3" style="margin-right: auto">
                                    <div id="timeButtonText">Thời gian</div>
                                </div>
                                <button class="btn-select-map btn bg-white px-3 py-2 rounded-3" onclick="toggleCalendar()"
                                    id="timeButton">
                                    Chọn ngày
                                </button>
                                <input type="date" class="form-control border-0" id="dateInput" style="display: none;">

                                <!-- Custom Calendar Picker -->
                                <div id="calendarPicker"
                                    class="position-absolute shadow-lg bg-white border rounded-3 shadow-lg p-3"
                                    style="top: 100%; left: 0; z-index: 1000; min-width: 280px; display: none;">
                                    <!-- Calendar Header -->
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <div class="d-flex align-items-center gap-2">
                                            <span class="fw-bold" id="currentMonth">August 2025</span>
                                            <i class="bi bi-chevron-down text-muted"></i>
                                        </div>
                                        <div class="d-flex gap-1">
                                            <button class="btn btn-sm btn-light" onclick="previousMonth()">↑</button>
                                            <button class="btn btn-sm btn-light" onclick="nextMonth()">↓</button>
                                        </div>
                                    </div>

                                    <!-- Week Days -->
                                    <div class="d-flex mb-2">
                                        <div class="flex-fill text-center text-muted small fw-medium">Su</div>
                                        <div class="flex-fill text-center text-muted small fw-medium">Mo</div>
                                        <div class="flex-fill text-center text-muted small fw-medium">Tu</div>
                                        <div class="flex-fill text-center text-muted small fw-medium">We</div>
                                        <div class="flex-fill text-center text-muted small fw-medium">Th</div>
                                        <div class="flex-fill text-center text-muted small fw-medium">Fr</div>
                                        <div class="flex-fill text-center text-muted small fw-medium">Sa</div>
                                    </div>

                                    <!-- Calendar Grid -->
                                    <div id="calendarGrid" class="mb-3">
                                        <!-- Calendar days will be generated by JavaScript -->
                                    </div>

                                    <!-- Calendar Footer -->
                                    <div class="d-flex justify-content-between">
                                        <button class="btn btn-sm btn-outline-secondary"
                                            onclick="clearDate()">Clear</button>
                                        <button class="btn btn-sm btn-outline-primary" onclick="setToday()">Today</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Hour Input -->
                        <div class="flex-grow-1">
                            <div style="height:52px" class="input-group border rounded position-relative">
                                <div class="d-flex align-items-center px-3" style="margin-right: auto">
                                    <span id="pickupReturnText" class="text-end">Nhận trả xe</span>
                                </div>
                                <button class="btn-select-map btn bg-white px-3 py-2 rounded-3" onclick="toggleTimePicker()"
                                    id="pickupReturnButton">
                                    Chọn giờ
                                </button>
                                <input type="time" class="form-control border-0" id="timeInput" style="display: none;">

                                <!-- Time Picker Dropdown -->
                                <div id="timePicker"
                                    class="position-absolute bg-white border shadow-lg rounded-3 shadow-lg p-3"
                                    style="top: 100%; left: 0; z-index: 1000; min-width: 250px; display: none;">
                                    <!-- Pick-up Time -->
                                    <div class="mb-3">
                                        <label class="form-label fw-medium text-dark mb-2">Giờ nhận</label>
                                        <div class="input-group">
                                            <input type="text" class="form-control border rounded-3" id="pickupTime"
                                                placeholder="10 AM" readonly>
                                            <button class="btn btn-outline-secondary border-start-0"
                                                onclick="toggleTimeDropdown('pickup')" type="button">
                                                <i class="bi bi-chevron-down"></i>
                                            </button>
                                        </div>
                                    </div>

                                    <!-- Return Time -->
                                    <div class="mb-3">
                                        <label class="form-label fw-medium text-dark mb-2">Giờ trả</label>
                                        <div class="input-group">
                                            <input type="text" class="form-control border rounded-3" id="returnTime"
                                                placeholder="10 AM" readonly>
                                            <button class="btn btn-outline-secondary border-start-0"
                                                onclick="toggleTimeDropdown('return')" type="button">
                                                <i class="bi bi-chevron-down"></i>
                                            </button>
                                        </div>
                                    </div>

                                    <!-- Time Options Dropdowns -->
                                    <div id="pickupTimeOptions"
                                        class="position-absolute bg-white border rounded-3 shadow-lg"
                                        style="top: 0; left: 100%; z-index: 1001; min-width: 120px; max-height: 200px; overflow-y: auto; display: none;">
                                        <!-- Time options will be generated by JavaScript -->
                                    </div>

                                    <div id="returnTimeOptions"
                                        class="position-absolute bg-white border rounded-3 shadow-lg"
                                        style="top: 0; left: 100%; z-index: 1001; min-width: 120px; max-height: 200px; overflow-y: auto; display: none;">
                                        <!-- Time options will be generated by JavaScript -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Right Section: Search Button -->
                    <div class="d-flex align-items-end">
                        <button class="btn btn-primary fw-bold px-5 py-3 rounded-4 w-100" style="min-width: 150px"
                            onclick="toggleFilterDrawer()">
                            Tìm xe
                        </button>
                    </div>
                </div>
            </div>

            <!-- Location Dropdown/Overlay -->
            <div id="locationDropdown" class="bg-white rounded-4 shadow-lg p-4 mt-3 position-relative z-3"
                style="max-width: 400px; display: none;">
                <!-- Current Location -->
                <div class="mb-3">
                    <div class="d-flex align-items-center gap-2 mb-2">
                        <i class="bi bi-geo-alt-fill text-primary"></i>
                        <span class="fw-medium text-dark">Vị trí hiện tại</span>
                    </div>
                    <div class="text-muted small cursor-pointer hover-bg-light p-2 rounded-3"
                        onclick="selectLocation('Quận 1, TP Hồ Chí Minh')">Quận 1, TP Hồ Chí Minh</div>
                </div>

                <!-- Suggested Destinations -->
                <div>
                    <div class="fw-medium text-dark mb-2">Điểm đến được đề xuất</div>
                    <div class="space-y-2">
                        <!-- Suggested Location 1 -->
                        <div class="d-flex align-items-center gap-3 p-2 rounded-3 hover-bg-light cursor-pointer"
                            onclick="selectLocation('Quận 1, 72 Lê Thánh Tôn Bến Nghé, Quận 1, Hồ Chí Minh')">
                            <i class="bi bi-geo-alt-fill text-primary"></i>
                            <div class="text-muted small">Quận 1, 72 Lê Thánh Tôn Bến Nghé, Quận 1, Hồ Chí Minh</div>
                        </div>

                        <!-- Suggested Location 2 -->
                        <div class="d-flex align-items-center gap-3 p-2 rounded-3 hover-bg-light cursor-pointer"
                            onclick="selectLocation('Quận 3, 123 Nguyễn Thị Minh Khai, Phường 6, Quận 3, Hồ Chí Minh')">
                            <i class="bi bi-geo-alt-fill text-primary"></i>
                            <div class="text-muted small">Quận 3, 123 Nguyễn Thị Minh Khai, Phường 6, Quận 3, Hồ Chí Minh
                            </div>
                        </div>

                        <!-- Suggested Location 3 -->
                        <div class="d-flex align-items-center gap-3 p-2 rounded-3 hover-bg-light cursor-pointer"
                            onclick="selectLocation('Quận 7, 456 Nguyễn Thị Thập, Phường Tân Phú, Quận 7, Hồ Chí Minh')">
                            <i class="bi bi-geo-alt-fill text-primary"></i>
                            <div class="text-muted small">Quận 7, 456 Nguyễn Thị Thập, Phường Tân Phú, Quận 7, Hồ Chí Minh
                            </div>
                        </div>

                        <!-- Suggested Location 4 -->
                        <div class="d-flex align-items-center gap-3 p-2 rounded-3 hover-bg-light cursor-pointer"
                            onclick="selectLocation('Quận 2, 789 Mai Chí Thọ, Phường An Phú, Quận 2, Hồ Chí Minh')">
                            <i class="bi bi-geo-alt-fill text-primary"></i>
                            <div class="text-muted small">Quận 2, 789 Mai Chí Thọ, Phường An Phú, Quận 2, Hồ Chí Minh</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Map Background Section -->
        <div class="position-absolute top-0 start-0 w-100 h-100" style="z-index: 1;">
            <div id="map" class="w-100 h-100"></div>

            <!-- Map Controls -->
            <div class="position-absolute bottom-0 end-0 m-3">
                <button class="btn btn-light rounded-3 shadow-sm" onclick="toggleMapLayers()">
                    <i class="bi bi-funnel"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Overlay -->
    <div id="drawerOverlay" class="drawer-overlay"></div>

    <!-- Filter Drawer -->
    <div id="filterDrawer" class="filter-drawer">
        <div class="filter-drawer-content">
            <!-- Drawer Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h4 class="fw-bold text-dark mb-0">Bộ lọc tìm kiếm</h4>
                <button class="btn-close-drawer" onclick="toggleFilterDrawer()">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>

            <!-- Car Brand Section -->
            <div class="filter-section mb-4">
                <h6 class="fw-bold text-dark mb-3">Hãng xe</h6>
                <div class="d-flex gap-2 overflow-x-auto" style="scrollbar-width: none; -ms-overflow-style: none;">
                    <button class="brand-btn active" onclick="selectBrand(this, 'bmw')">
                        <img src="<?php echo e(asset('/assets/images/bmw.png')); ?>" alt="">
                        <div class="brand-name">BMW</div>
                    </button>
                    <button class="brand-btn" onclick="selectBrand(this, 'bmw')">
                        <img src="<?php echo e(asset('/assets/images/bmw.png')); ?>" alt="">
                        <div class="brand-name">BMW</div>
                    </button>
                    <button class="brand-btn" onclick="selectBrand(this, 'bmw')">
                        <img src="<?php echo e(asset('/assets/images/bmw.png')); ?>" alt="">
                        <div class="brand-name">BMW</div>
                    </button>
                    <button class="brand-btn" onclick="selectBrand(this, 'bmw')">
                        <img src="<?php echo e(asset('/assets/images/bmw.png')); ?>" alt="">
                        <div class="brand-name">BMW</div>
                    </button>
                </div>
            </div>

            <!-- Car Class Section -->
            <div class="filter-section mb-4">
                <h6 class="fw-bold text-dark mb-3">Hạng xe</h6>
                <div class="d-flex gap-2 overflow-x-auto" style="scrollbar-width: none; -ms-overflow-style: none;">
                    <button class="class-btn active" onclick="selectCarClass(this, 'otod')">
                        <img src="<?php echo e(asset('/assets/images/car-rcmd.png')); ?>" alt="">
                        Xe OTOD đề xuất
                    </button>
                    <button class="class-btn" onclick="selectCarClass(this, 'premium')">
                        <img src="<?php echo e(asset('/assets/images/car-vip.png')); ?>" alt="">
                        Xe cao cấp
                    </button>
                    <button class="class-btn" onclick="selectCarClass(this, 'standard')">
                        <img src="<?php echo e(asset('/assets/images/car-high.png')); ?>" alt="">
                        Xe tiêu chuẩn
                    </button>
                </div>
            </div>

            <!-- Price Range Section -->
            <div class="filter-section mb-4">
                <h6 class="fw-bold text-dark mb-3">Khoảng giá/ngày</h6>
                <div class="price-slider-container">
                    <div class="price-slider">
                        <input type="range" id="minPrice" min="0" max="5000000" value="1500000"
                            class="price-range">
                        <input type="range" id="maxPrice" min="0" max="5000000" value="2500000"
                            class="price-range">
                    </div>
                    <div class="price-display mt-2">
                        <span id="priceRangeDisplay">1.500.000₫ - 2.500.000₫</span>
                    </div>
                </div>
            </div>

            <!-- Number of Seats Section -->
            <div class="filter-section mb-4">
                <h6 class="fw-bold text-dark mb-3">Số chỗ</h6>
                <div class="d-flex gap-2 flex-wrap">
                    <button class="seat-btn active" onclick="selectSeats(this, 'all')">Tất cả</button>
                    <button class="seat-btn" onclick="selectSeats(this, '4')">4</button>
                    <button class="seat-btn" onclick="selectSeats(this, '7')">7</button>
                    <button class="seat-btn" onclick="selectSeats(this, '9')">9</button>
                    <button class="seat-btn" onclick="selectSeats(this, '16')">16</button>
                </div>
            </div>

            <!-- Car Model Section -->
            <div class="filter-section mb-4">
                <h6 class="fw-bold text-dark mb-3 ">Mẫu xe</h6>
                <div class="model-list" style="scrollbar-width: none; -ms-overflow-style: none;">
                    <div class="model-item">
                        <input type="checkbox" id="selectAll" class="form-check-input" onchange="toggleSelectAll()">
                        <label for="selectAll" class="form-check-label ms-2">Chọn tất cả (20)</label>
                    </div>
                    <div class="model-item">
                        <input type="checkbox" id="almera1" class="form-check-input model-checkbox"
                            onchange="updateSelectAll()">
                        <label for="almera1" class="form-check-label ms-2">Almera</label>
                    </div>
                    <div class="model-item">
                        <input type="checkbox" id="almera2" class="form-check-input model-checkbox"
                            onchange="updateSelectAll()">
                        <label for="almera2" class="form-check-label ms-2">Almera</label>
                    </div>
                    <div class="model-item">
                        <input type="checkbox" id="almera3" class="form-check-input model-checkbox"
                            onchange="updateSelectAll()">
                        <label for="almera3" class="form-check-label ms-2">Almera</label>
                    </div>
                    <div class="model-item">
                        <input type="checkbox" id="almera4" class="form-check-input model-checkbox"
                            onchange="updateSelectAll()">
                        <label for="almera4" class="form-check-label ms-2">Almera</label>
                    </div>
                    <div class="model-item">
                        <input type="checkbox" id="almera5" class="form-check-input model-checkbox"
                            onchange="updateSelectAll()">
                        <label for="almera5" class="form-check-label ms-2">Almera</label>
                    </div>
                </div>
            </div>
        </div>
    </div>
<?php $__env->stopSection(); ?>

<style>
    .hover-bg-light:hover {
        background-color: #f8f9fa;
    }

    .cursor-pointer {
        cursor: pointer;
    }

    .space-y-2>*+* {
        margin-top: 0.5rem;
    }

    .z-3 {
        z-index: 3;
    }

    #map {
        background-color: #f8f9fa;
    }

    /* Ensure content is above map */
    .container {
        position: relative;
        z-index: 3;
    }

    /* Map positioning - only within content area */
    .position-absolute {
        position: absolute !important;
    }

    /* Ensure map doesn't overlap header */
    body {
        position: relative;
    }

    /* Content wrapper to contain the map */
    .content-wrapper {
        position: relative;
        min-height: 100vh;
    }

    .leaflet-control-zoom {
        border: none !important;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
    }

    .leaflet-control-zoom a {
        background: white !important;
        color: #333 !important;
        border: none !important;
        border-radius: 4px !important;
        margin: 2px !important;
    }

    .leaflet-control-zoom a:hover {
        background: #f8f9fa !important;
    }

    .btn-select-map:hover {
        opacity: 0.5;
        color: #0A0A0A;
    }

    /* Calendar Picker Styles */
    .calendar-day {
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        border-radius: 4px;
        font-size: 14px;
        transition: all 0.2s;
    }

    .calendar-day:hover {
        background-color: #f8f9fa;
    }

    .calendar-day.selected {
        background-color: #233876;
        color: white;
    }

    .calendar-day.other-month {
        color: #ccc;
    }

    .calendar-day.today {
        border: 2px solid #233876;
        font-weight: bold;
    }

    /* Time Picker Styles */
    .time-option {
        padding: 8px 12px;
        cursor: pointer;
        border-bottom: 1px solid #f0f0f0;
        transition: background-color 0.2s;
    }

    .time-option:hover {
        background-color: #f8f9fa;
    }

    .time-option:last-child {
        border-bottom: none;
    }

    .time-option.selected {
        background-color: #e3f2fd;
        color: #1976d2;
        font-weight: 500;
    }

    /* Ensure time picker dropdowns are clickable */
    #pickupTimeOptions,
    #returnTimeOptions {
        pointer-events: auto !important;
        user-select: none;
    }

    .time-option {
        pointer-events: auto !important;
        user-select: none;
    }

    /* Overlay Styles */
    .drawer-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        background: rgba(0, 0, 0, 0.5);
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
        z-index: 9998;
    }

    .drawer-overlay.active {
        opacity: 1;
        visibility: visible;
    }

    /* Filter Drawer Styles */
    .filter-drawer {
        position: fixed;
        top: 0;
        right: -400px;
        width: 400px;
        height: 100vh;
        background: white;
        box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);
        transition: right 0.3s ease;
        z-index: 9999;
        overflow-y: auto;
    }

    .filter-drawer.open {
        right: 0;
    }

    .filter-drawer-content {
        padding: 2rem;
        height: 100%;
    }

    .btn-close-drawer {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background-color 0.2s;
    }

    .btn-close-drawer:hover {
        background-color: #f8f9fa;
    }

    /* Brand Buttons */
    .brand-btn {
        min-width: 80px;
        height: 80px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        background: white;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s;
        padding: 0.5rem;
    }

    .brand-btn:hover {
        border-color: #233876;
        background-color: #f8f9fa;
    }

    .brand-btn.active {
        border-color: #233876;
        background-color: #e3f2fd;
    }

    .brand-logo {
        font-weight: bold;
        font-size: 1.2rem;
        color: #233876;
    }

    .brand-name {
        font-size: 0.8rem;
        color: #6c757d;
    }

    /* Class Buttons */
    .class-btn {
        border: 2px solid #e9ecef;
        border-radius: 20px;
        background: white;
        padding: 1rem;
        cursor: pointer;
        transition: all 0.2s;
        font-size: 0.9rem;
        min-width: 120px;
        flex-shrink: 0;
        display: flex;
        align-items: center;
        text-align: center;
        gap: 0.5rem;
    }

    .class-btn:hover {
        border-color: #233876;
        background-color: #f8f9fa;
    }

    .class-btn.active {
        border-color: #233876;
        background-color: #e3f2fd;
        color: #233876;
    }

    /* Seat Buttons */
    .seat-btn {
        border: 2px solid #e9ecef;
        border-radius: 20px;
        background: white;
        padding: 0.5rem 1rem;
        cursor: pointer;
        transition: all 0.2s;
        font-size: 0.9rem;
        min-width: 50px;
    }

    .seat-btn:hover {
        border-color: #233876;
        background-color: #f8f9fa;
    }

    .seat-btn.active {
        border-color: #233876;
        background-color: #e3f2fd;
        color: #233876;
    }

    /* Price Slider */
    .price-slider-container {
        padding: 1rem 0;
    }

    .price-slider {
        position: relative;
        height: 40px;
        display: flex;
        align-items: center;
    }

    .price-slider::before {
        content: '';
        position: absolute;
        left: 0;
        right: 0;
        height: 6px;
        background: linear-gradient(to right, rgba(43, 177, 255, 1), rgba(255, 228, 122, 1));
        border-radius: 3px;
        z-index: 0;
    }

    .price-range {
        position: absolute;
        width: 100%;
        height: 6px;
        background: transparent;
        border-radius: 3px;
        outline: none;
        pointer-events: none;
        -webkit-appearance: none;
        z-index: 1;
    }

    .price-range::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 20px;
        height: 20px;
        background: #233876;
        border-radius: 50%;
        cursor: pointer;
        pointer-events: auto;
        border: 2px solid white;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .price-range::-moz-range-thumb {
        width: 20px;
        height: 20px;
        background: #233876;
        border-radius: 50%;
        cursor: pointer;
        border: 2px solid white;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        pointer-events: auto;
    }

    #minPrice {
        z-index: 2;
    }

    #maxPrice {
        z-index: 2;
    }

    .price-display {
        text-align: center;
        font-weight: 500;
        color: #233876;
    }

    /* Model List */
    .model-list {
        max-height: 200px;
        overflow-y: auto;
    }

    .model-item {
        padding: 0.5rem 0;
        border-bottom: 1px solid #f0f0f0;
    }

    .model-item:last-child {
        border-bottom: none;
    }

    .form-check-input:checked {
        background-color: #233876;
        border-color: #233876;
    }

    /* Responsive */
    @media (max-width: 768px) {
        .filter-drawer {
            width: 100%;
            right: -100%;
        }
    }
</style>

<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<!-- Leaflet JavaScript -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script>
    // Initialize map when page loads
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize the map centered on Ho Chi Minh City
        var map = L.map('map', {
            center: [10.8231, 106.6297], // Ho Chi Minh City coordinates
            zoom: 13,
            zoomControl: false, // Disable default zoom control
            attributionControl: false // Disable attribution
        });

        // Add OpenStreetMap tiles
        var osmTiles = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        });
        osmTiles.addTo(map);

        // Add satellite tiles as alternative
        var satelliteTiles = L.tileLayer(
            'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
                maxZoom: 19,
                attribution: '© Esri'
            });

        // Add current location marker
        var currentLocationMarker = L.marker([10.8231, 106.6297], {
            icon: L.divIcon({
                className: 'custom-marker',
                html: '<i class="bi bi-geo-alt-fill text-primary" style="font-size: 2rem; filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.3));"></i>',
                iconSize: [40, 40],
                iconAnchor: [20, 40]
            })
        }).addTo(map);

        // Add popup to marker
        currentLocationMarker.bindPopup('<b>Vị trí hiện tại</b><br>Quận 1, TP Hồ Chí Minh');

        // Add custom zoom control
        var zoomControl = L.control.zoom({
            position: 'bottomright'
        }).addTo(map);

        // Store map and layers globally for toggle function
        window.mapInstance = map;
        window.osmTiles = osmTiles;
        window.satelliteTiles = satelliteTiles;
        window.currentLayer = 'osm';
    });

    // Function to toggle between map layers
    function toggleMapLayers() {
        if (!window.mapInstance) return;

        if (window.currentLayer === 'osm') {
            window.mapInstance.removeLayer(window.osmTiles);
            window.satelliteTiles.addTo(window.mapInstance);
            window.currentLayer = 'satellite';
        } else {
            window.mapInstance.removeLayer(window.satelliteTiles);
            window.osmTiles.addTo(window.mapInstance);
            window.currentLayer = 'osm';
        }
    }

    // Function to toggle location dropdown
    function toggleLocationDropdown() {
        const dropdown = document.getElementById('locationDropdown');
        if (dropdown.style.display === 'none' || dropdown.style.display === '') {
            dropdown.style.display = 'block';
        } else {
            dropdown.style.display = 'none';
        }
    }

    // Calendar Picker Functions
    let currentDate = new Date();
    let selectedDate = null;

    function toggleCalendar() {
        const calendar = document.getElementById('calendarPicker');
        if (calendar.style.display === 'none' || calendar.style.display === '') {
            calendar.style.display = 'block';
            renderCalendar();
        } else {
            calendar.style.display = 'none';
        }
    }

    function renderCalendar() {
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();

        // Update month/year display
        document.getElementById('currentMonth').textContent =
            currentDate.toLocaleDateString('en-US', {
                month: 'long',
                year: 'numeric'
            });

        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay());

        const calendarGrid = document.getElementById('calendarGrid');
        calendarGrid.innerHTML = '';

        for (let week = 0; week < 6; week++) {
            const weekDiv = document.createElement('div');
            weekDiv.className = 'd-flex';

            for (let day = 0; day < 7; day++) {
                const date = new Date(startDate);
                date.setDate(startDate.getDate() + week * 7 + day);

                const dayDiv = document.createElement('div');
                dayDiv.className = 'calendar-day';
                dayDiv.textContent = date.getDate();

                // Check if it's today
                const today = new Date();
                if (date.toDateString() === today.toDateString()) {
                    dayDiv.classList.add('today');
                }

                // Check if it's selected
                if (selectedDate && date.toDateString() === selectedDate.toDateString()) {
                    dayDiv.classList.add('selected');
                }

                // Check if it's from other month
                if (date.getMonth() !== month) {
                    dayDiv.classList.add('other-month');
                }

                dayDiv.onclick = () => selectDate(date);
                weekDiv.appendChild(dayDiv);
            }

            calendarGrid.appendChild(weekDiv);
        }
    }

    function selectDate(date) {
        selectedDate = date;
        document.getElementById('dateInput').value = date.toISOString().split('T')[0];

        // Format date for display (DD/MM/YYYY)
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const year = date.getFullYear();
        const formattedDate = `${day}/${month}/${year}`;

        // Update button text to show selected date
        document.getElementById('timeButtonText').textContent = formattedDate;

        renderCalendar();

        // Hide calendar after selection
        setTimeout(() => {
            document.getElementById('calendarPicker').style.display = 'none';
        }, 300);
    }

    function previousMonth() {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar();
    }

    function nextMonth() {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar();
    }

    function clearDate() {
        selectedDate = null;
        document.getElementById('dateInput').value = '';
        document.getElementById('timeButtonText').textContent = 'Thời gian';
        renderCalendar();
    }

    function setToday() {
        selectedDate = new Date();
        document.getElementById('dateInput').value = selectedDate.toISOString().split('T')[0];

        // Format today's date for display
        const day = selectedDate.getDate().toString().padStart(2, '0');
        const month = (selectedDate.getMonth() + 1).toString().padStart(2, '0');
        const year = selectedDate.getFullYear();
        const formattedDate = `${day}/${month}/${year}`;

        // Update button text to show today's date
        document.getElementById('timeButtonText').textContent = formattedDate;

        renderCalendar();
    }

    // Close calendar when clicking outside
    document.addEventListener('click', function(event) {
        const calendar = document.getElementById('calendarPicker');
        const timeButton = event.target.closest('button[onclick="toggleCalendar()"]');

        if (!calendar.contains(event.target) && !timeButton) {
            calendar.style.display = 'none';
        }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
        const dropdown = document.getElementById('locationDropdown');
        const button = event.target.closest('button[onclick="toggleLocationDropdown()"]');

        if (!dropdown.contains(event.target) && !button) {
            dropdown.style.display = 'none';
        }
    });

    // Time Picker Functions
    let selectedPickupTime = null;
    let selectedReturnTime = null;

    function toggleTimePicker() {
        const timePicker = document.getElementById('timePicker');
        if (timePicker.style.display === 'none' || timePicker.style.display === '') {
            timePicker.style.display = 'block';
        } else {
            timePicker.style.display = 'none';
        }
    }

    function toggleTimeDropdown(type) {
        console.log('toggleTimeDropdown called with type:', type);
        const pickupOptions = document.getElementById('pickupTimeOptions');
        const returnOptions = document.getElementById('returnTimeOptions');

        if (type === 'pickup') {
            pickupOptions.style.display = pickupOptions.style.display === 'none' ? 'block' : 'none';
            returnOptions.style.display = 'none';
            if (pickupOptions.style.display === 'block') {
                renderTimeOptions('pickup');
            }
        } else {
            returnOptions.style.display = returnOptions.style.display === 'none' ? 'block' : 'none';
            pickupOptions.style.display = 'none';
            if (returnOptions.style.display === 'block') {
                renderTimeOptions('return');
            }
        }
    }

    function renderTimeOptions(type) {
        console.log('renderTimeOptions called with type:', type);
        const container = type === 'pickup' ? 'pickupTimeOptions' : 'returnTimeOptions';
        const optionsContainer = document.getElementById(container);
        console.log('optionsContainer:', optionsContainer);

        // Generate time options from 6 AM to 10 PM
        const timeOptions = [];
        for (let hour = 6; hour <= 22; hour++) {
            let time = hour <= 12 ? `${hour} AM` : `${hour - 12} PM`;
            if (hour === 12) time = '12 PM';
            if (hour === 0) time = '12 AM';
            timeOptions.push(time);
        }

        optionsContainer.innerHTML = '';
        timeOptions.forEach(time => {
            const option = document.createElement('div');
            option.className = 'time-option';
            option.textContent = time;

            // Check if this time is selected
            if (type === 'pickup' && selectedPickupTime === time) {
                option.classList.add('selected');
            } else if (type === 'return' && selectedReturnTime === time) {
                option.classList.add('selected');
            }

            option.onclick = () => selectTime(type, time);
            optionsContainer.appendChild(option);
        });
    }

    function selectTime(type, time) {
        console.log('selectTime called with type:', type, 'time:', time);
        if (type === 'pickup') {
            selectedPickupTime = time;
            document.getElementById('pickupTime').value = time;
            document.getElementById('pickupTimeOptions').style.display = 'none';
        } else {
            selectedReturnTime = time;
            document.getElementById('returnTime').value = time;
            document.getElementById('returnTimeOptions').style.display = 'none';
        }

        // Update main time input
        if (selectedPickupTime && selectedReturnTime) {
            document.getElementById('timeInput').value = `${selectedPickupTime} - ${selectedReturnTime}`;

            // Update button text to show selected times
            const displayText = `${selectedPickupTime} - ${selectedReturnTime}`;
            document.getElementById('pickupReturnText').textContent = displayText;
        }
    }

    // Close time picker when clicking outside
    document.addEventListener('click', function(event) {
        const timePicker = document.getElementById('timePicker');
        const timeButton = event.target.closest('button[onclick="toggleTimePicker()"]');

        if (!timePicker.contains(event.target) && !timeButton) {
            timePicker.style.display = 'none';
            document.getElementById('pickupTimeOptions').style.display = 'none';
            document.getElementById('returnTimeOptions').style.display = 'none';
        }
    });

    // Function to reset pickup/return time display
    function resetPickupReturnDisplay() {
        selectedPickupTime = null;
        selectedReturnTime = null;
        document.getElementById('pickupReturnText').textContent = 'Chọn giờ';
        document.getElementById('timeInput').value = '';
        document.getElementById('pickupTime').value = '';
        document.getElementById('returnTime').value = '';
    }

    // Function to select location
    function selectLocation(location) {
        // Update the location input field
        document.getElementById('locationInput').value = location;

        // Update the button text to show selected location
        document.getElementById('locationButton').textContent = location;

        // Hide the dropdown
        document.getElementById('locationDropdown').style.display = 'none';
    }

    // Function to reset location display
    function resetLocationDisplay() {
        document.getElementById('locationInput').value = '';
        document.getElementById('locationButton').textContent = 'Chọn từ bản đồ';
    }

    // Filter Drawer Functions
    function toggleFilterDrawer() {
        const drawer = document.getElementById('filterDrawer');
        const overlay = document.getElementById('drawerOverlay');

        drawer.classList.toggle('open');
        overlay.classList.toggle('active');
    }

    // Brand selection
    function selectBrand(button, brand) {
        // Remove active class from all brand buttons
        document.querySelectorAll('.brand-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        // Add active class to clicked button
        button.classList.add('active');
    }

    // Car class selection
    function selectCarClass(button, carClass) {
        // Remove active class from all class buttons
        document.querySelectorAll('.class-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        // Add active class to clicked button
        button.classList.add('active');
    }

    // Seat selection
    function selectSeats(button, seats) {
        // Remove active class from all seat buttons
        document.querySelectorAll('.seat-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        // Add active class to clicked button
        button.classList.add('active');
    }

    // Price range slider
    document.addEventListener('DOMContentLoaded', function() {
        const minPrice = document.getElementById('minPrice');
        const maxPrice = document.getElementById('maxPrice');
        const priceDisplay = document.getElementById('priceRangeDisplay');

        function updatePriceDisplay() {
            const min = parseInt(minPrice.value);
            const max = parseInt(maxPrice.value);

            // Format price with dots
            const formatPrice = (price) => {
                return price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
            };

            priceDisplay.textContent = `${formatPrice(min)}₫ - ${formatPrice(max)}₫`;
        }

        minPrice.addEventListener('input', updatePriceDisplay);
        maxPrice.addEventListener('input', updatePriceDisplay);
    });

    // Select all models
    function toggleSelectAll() {
        const selectAllCheckbox = document.getElementById('selectAll');
        const modelCheckboxes = document.querySelectorAll('.model-checkbox');

        modelCheckboxes.forEach(checkbox => {
            checkbox.checked = selectAllCheckbox.checked;
        });
    }

    // Update select all checkbox
    function updateSelectAll() {
        const selectAllCheckbox = document.getElementById('selectAll');
        const modelCheckboxes = document.querySelectorAll('.model-checkbox');
        const checkedBoxes = document.querySelectorAll('.model-checkbox:checked');

        selectAllCheckbox.checked = checkedBoxes.length === modelCheckboxes.length;
    }

    // Close drawer when clicking outside
    document.addEventListener('click', function(event) {
        const drawer = document.getElementById('filterDrawer');
        const overlay = document.getElementById('drawerOverlay');
        const searchButton = event.target.closest('button[onclick="toggleFilterDrawer()"]');

        if (drawer.classList.contains('open') &&
            !drawer.contains(event.target) &&
            !searchButton) {
            drawer.classList.remove('open');
            overlay.classList.remove('active');
        }
    });

    // Close drawer when clicking on overlay
    document.getElementById('drawerOverlay').addEventListener('click', function() {
        const drawer = document.getElementById('filterDrawer');
        const overlay = document.getElementById('drawerOverlay');

        drawer.classList.remove('open');
        overlay.classList.remove('active');
    });
</script>

<?php echo $__env->make('layouts.layout-header', \Illuminate\Support\Arr::except(get_defined_vars(), ['__data', '__path']))->render(); ?><?php /**PATH D:\Source Web\otod-github\otod\resources\views/search-higher.blade.php ENDPATH**/ ?>